#!/usr/bin/env node

let fs = import 'fs'
let path = import 'path'

let args = process.argv.slice(2)
if args.length < 2
    console.log(
        ""
            Usage: ion input.pegs output.js [-w]

              -w   watches the grammar and rebuilds it when changed
    )
    return


let watch = args.indexOf('-w') >= 0
let boot = args.indexOf('-b') >= 0 # undocumented feature.
let inputName = args[0]
let outputName = args[1]
let parser = import(boot ? './bootstrap' : './parser')

let makeParentDir = (outputName) ->
    let parent = path.dirname(outputName)
    if not fs.existsSync(parent)
        makeParentDir(parent)
        fs.mkdirSync(parent)

let build = ->
    let source = fs.readFileSync(inputName, {encoding:'utf8'})
    console.log("Generating {{inputName}} -------------------------")
    let result = parser.parse(source, inputName)
    if not fs.existsSync(outputName) or fs.readFileSync(outputName, 'utf8') isnt result
        makeParentDir(outputName)
        fs.writeFileSync(outputName, result, {encoding:'utf8'})
        console.log("Writing {{outputName}}")
    # console.log(result)

if watch
    let trybuild = (event, filename) ->
        console.log('event', event, new Date().getTime())
        try
            build()
        catch e
            console.error(e.message)
    .throttle(2000)

    trybuild()
    require('fs').watch(inputName, trybuild)
else
    build()
