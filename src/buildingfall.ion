
# let getFallTime = (floors, height, failingFloor) ->
#     let a = 9.8 # meters per second acceleration due to gravity
#     let getTimeToFallDistance = (velocity, distance) ->
#         # because I'm lazy and my calculus sucks, use wolfram alpha to get solution for time to fall a set distance
#         # based upon an initial velocity and acceleration (gravity)
#         # http://www.wolframalpha.com/input/?i=solve+s+%3D+v*t%2B(a%2F2)*t%5E2+for+t
#         return (Math.pow(2 * a * distance + velocity * velocity, 0.5) - velocity) / a
#     # mass actually cancels out in this algorithm, so we will just use a mass of 1 unit for every floor.
#     let floorHeight = height / floors
#     let time = 0
#     let floorsRemaining = failingFloor          # height of bottom of upper section which is falling.
#     let fallingMass = floors - failingFloor     # initial mass of upper falling section
#     let fallingVelocity = 0                     # initially at rest
#     while floorsRemaining > 0
#         # we will accelerate the fallingMass for one floor.
#         let floorFallTime = getTimeToFallDistance(fallingVelocity, floorHeight)
#         # update the total fall time.
#         time = time + floorFallTime
#         # update velocity with the new speed at time of right before impact with next floor
#         # ie: the falling mass picks up speed for a floor.
#         fallingVelocity = fallingVelocity + a * floorFallTime
#         # now, the falling mass collides with the next floor.
#         let momentumBeforeCollision = fallingMass * fallingVelocity
#         # it gains mass of 1 floor
#         fallingMass = fallingMass + 1
#         # that slows it down, due to conservation of momentum, so recalculate slower velocity
#         fallingVelocity = momentumBeforeCollision / fallingMass
#         # we now have one less floor remaining
#         floorsRemaining = floorsRemaining - 1
#         # console.log(JSON.stringify({floorsRemaining, time, floorFallTime, fallingVelocity, fallingMass}))

#     # at this point, the base of the falling mass has hit the ground
#     # we now still have to wait for the upper part of the mass to hit the ground.
#     let remainingHeight = floorHeight * (floors - failingFloor)
#     let remainingFallTime = getTimeToFallDistance(fallingVelocity, remainingHeight)
#     time += remainingFallTime

#     console.log(JSON.stringify({floors, height, failingFloor, time}))

# export const test = ->
#     for i in [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]
#         getFallTime(110, 416, i)
